#
# Configuration required to authenticate requests for web resources.
#
# The nginx `auth_request` module is used to accomplish this.  To perform
# authentication, NGINX makes an HTTP subrequest to an external server where the
# subrequest is verified.  If the subrequest returns a 2xx response code, the
# access is allowed, if it returns 401 or 403, the access is denied.
#
# The external server uses an HTTP cookie to determine if a request is allowed
# or denied.  This cooke stores a token that has been generated by the external
# server during the login of the user.  If the token can be successfully
# validated, the request is allowed.
#
# When access to a resource is denied, NGINX automatically redirects the client
# to the login page.  If the user provides valid credentials to the external
# server, a new token is generated and returned to the client via the HTTP
# cookie.  Once done, further requests done by the client include the cookie,
# allowing the external server to successfully authorize access to resources.
#
# Inspired by https://redbyte.eu/en/blog/using-the-nginx-auth-request-module/
# Also check https://github.com/vouch/vouch-proxy
#

# Enable authentication check for all requests.
auth_request /auth;

# Endpoint to perform authentication check.
location = /auth {
	# Mark as internal (cannot be accessed by clients).
	internal;

	# Pass the original host header.
	proxy_set_header Host $host;

	# Pass the requested URI.
	proxy_set_header X-Original-URI $request_uri;

	# Pass information of the sender.
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Real-IP $remote_addr;

	# Do not pass the body to the authentication service.
	proxy_pass_request_body off;
	proxy_set_header Content-Length "";

	# Forward request to the authentication service.
	proxy_pass http://unix:/tmp/webauth.sock:/auth;
}

# Endpoint to perform the login.
location = /login/login {
	# Authentication check disabled for the login.
	auth_request off;

	# Pass information of the sender.
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Real-IP $remote_addr;

	# Forward login request to the authentication service.
	proxy_pass http://unix:/tmp/webauth.sock:/login;
}

# Endpoint to perform the logout.
location = /logout {
	# Pass information of the sender.
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header Cookie "$http_cookie;logout_redirect_url=$scheme://$http_host/";

	# Forward logout request to the authentication service.
	proxy_pass http://unix:/tmp/webauth.sock:/logout;
}

# Login page.
location = /login {
	# Authentication check disabled for the login page.
	auth_request off;

	return 302 $scheme://$http_host$request_uri/$is_args$args;
}
location /login/ {
	index index.html;

	# Authentication check disabled for the login page.
	auth_request off;

	# Prevent accessing the login page if cookies are missing.
	# This could happen if user reach the login page directly.
	# When this situation is detected, redirect to the root page
	# to trigger an authentication check and be redirected to the
	# login page, but this time, with cookies set.
	set $redir "";
	if ($cookie_login_success_url) {
		set $redir "${redir}S";
	}
	if ($cookie_login_failure_url) {
		set $redir "${redir}F";
	}
	if ($redir != "SF") {
		return 302 $scheme://$http_host/;
	}
}

# Redirect to the login page if the /auth endpoint returns `401 not authorized`.
#
# Cookies are used to instruct the authentication server where to redirect the
# user after a sucessful or failed login.
error_page 401 = @error401;
location @error401 {
	add_header Set-Cookie "login_success_url=$scheme://$http_host$request_uri;Path=/";
	add_header Set-Cookie "login_failure_url=$scheme://$http_host/login/;Path=/";
	return 302 $scheme://$http_host/login/;
}
