index 714a81a63..9a8d7c5c9 100644
--- a/src/modules/module-null-sink.c
+++ b/src/modules/module-null-sink.c
@@ -21,6 +21,10 @@
 #include <config.h>
 #endif
 
+#ifdef __PA_STATIC_MODULE
+#define PA_MODULE_NAME null_sink
+#endif
+
 #include <stdlib.h>
 #include <stdio.h>
 #include <errno.h>
@@ -312,7 +316,11 @@ finish:
     pa_log_debug("Thread shutting down");
 }
 
+#ifdef __PA_STATIC_MODULE
+int pa__init__null_sink(pa_module*m) {
+#else
 int pa__init(pa_module*m) {
+#endif
     struct userdata *u = NULL;
     pa_sample_spec ss;
     pa_channel_map map;
@@ -438,12 +446,20 @@ fail:
     if (ma)
         pa_modargs_free(ma);
 
+#ifdef __PA_STATIC_MODULE
+    pa__done__null_sink(m);
+#else
     pa__done(m);
+#endif
 
     return -1;
 }
 
+#ifdef __PA_STATIC_MODULE
+int pa__get_n_used__null_sink(pa_module *m) {
+#else
 int pa__get_n_used(pa_module *m) {
+#endif
     struct userdata *u;
 
     pa_assert(m);
@@ -452,7 +468,11 @@ int pa__get_n_used(pa_module *m) {
     return pa_sink_linked_by(u->sink);
 }
 
+#ifdef __PA_STATIC_MODULE
+void pa__done__null_sink(pa_module*m) {
+#else
 void pa__done(pa_module*m) {
+#endif
     struct userdata *u;
 
     pa_assert(m);
diff --git a/src/modules/module-protocol-stub.c b/src/modules/module-protocol-stub.c
index 5dd3fe079..3d1c0c241 100644
--- a/src/modules/module-protocol-stub.c
+++ b/src/modules/module-protocol-stub.c
@@ -30,6 +30,10 @@
 #include <netinet/in.h>
 #endif
 
+#ifdef __PA_STATIC_MODULE
+#define PA_MODULE_NAME native_protocol_unix
+#endif
+
 #include <pulse/xmalloc.h>
 
 #include <pulsecore/core-error.h>
@@ -205,7 +209,11 @@ static void socket_server_on_connection_cb(pa_socket_server*s, pa_iochannel *io,
 #endif
 }
 
+#ifdef __PA_STATIC_MODULE
+int pa__init__native_protocol_unix(pa_module*m) {
+#else
 int pa__init(pa_module*m) {
+#endif
     pa_modargs *ma = NULL;
     struct userdata *u = NULL;
 
@@ -382,12 +390,20 @@ fail:
     if (ma)
         pa_modargs_free(ma);
 
+#ifdef __PA_STATIC_MODULE
+    pa__done__native_protocol_unix(m);
+#else
     pa__done(m);
+#endif
 
     return -1;
 }
 
+#ifdef __PA_STATIC_MODULE
+void pa__done__native_protocol_unix(pa_module*m) {
+#else
 void pa__done(pa_module*m) {
+#endif
     struct userdata *u;
 
     pa_assert(m);
diff --git a/src/pulsecore/module.h b/src/pulsecore/module.h
index f918ea605..edcbe9a28 100644
--- a/src/pulsecore/module.h
+++ b/src/pulsecore/module.h
@@ -73,6 +73,7 @@ void pa_module_update_proplist(pa_module *m, pa_update_mode_t mode, pa_proplist
 
 void pa_module_hook_connect(pa_module *m, pa_hook *hook, pa_hook_priority_t prio, pa_hook_cb_t cb, void *data);
 
+#ifndef __PA_STATIC_MODULE
 #define PA_MODULE_AUTHOR(s)                                     \
     const char *pa__get_author(void) { return s; }              \
     struct __stupid_useless_struct_to_allow_trailing_semicolon
@@ -96,6 +97,7 @@ void pa_module_hook_connect(pa_module *m, pa_hook *hook, pa_hook_priority_t prio
 #define PA_MODULE_LOAD_ONCE(b)                                  \
     bool pa__load_once(void) { return b; }                 \
     struct __stupid_useless_struct_to_allow_trailing_semicolon
+#endif /* !__PA_STATIC_MODULE */
 
 /* Check if we're defining a module (usually defined via compiler flags) */
 #ifdef PA_MODULE_NAME
@@ -104,6 +106,45 @@ void pa_module_hook_connect(pa_module *m, pa_hook *hook, pa_hook_priority_t prio
 #define _MACRO_CONCAT1(a, b) a ## b
 #define _MACRO_CONCAT(a, b) _MACRO_CONCAT1(a, b)
 
+#ifdef __PA_STATIC_MODULE
+
+#define PA_MODULE_AUTHOR(s)                           \
+    const char *_MACRO_CONCAT(pa__get_author__, PA_MODULE_NAME)(void) { return s; }         \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+#define PA_MODULE_DESCRIPTION(s)                         \
+    const char *_MACRO_CONCAT(pa__get_description__, PA_MODULE_NAME)(void) { return s; }    \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+#define PA_MODULE_USAGE(s)                            \
+    const char *_MACRO_CONCAT(pa__get_usage__, PA_MODULE_NAME)(void) { return s; }          \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+#define PA_MODULE_VERSION(s)                          \
+    const char * _MACRO_CONCAT(pa__get_version__, PA_MODULE_NAME)(void) { return s; }       \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+#define PA_MODULE_DEPRECATED(s)                       \
+    const char * _MACRO_CONCAT(pa__get_deprecated__, PA_MODULE_NAME)(void) { return s; }    \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+#define PA_MODULE_LOAD_ONCE(b)                        \
+    bool _MACRO_CONCAT(pa__load_once__, PA_MODULE_NAME)(void) { return b; }                 \
+    struct __stupid_useless_struct_to_allow_trailing_semicolon
+
+int _MACRO_CONCAT(pa__init__, PA_MODULE_NAME)(pa_module*m);
+void _MACRO_CONCAT(pa__done__, PA_MODULE_NAME)(pa_module*m);
+int _MACRO_CONCAT(pa__get_n_used__, PA_MODULE_NAME)(pa_module*m);
+
+const char* _MACRO_CONCAT(pa__get_author__, PA_MODULE_NAME)(void);
+const char* _MACRO_CONCAT(pa__get_description__, PA_MODULE_NAME)(void);
+const char* _MACRO_CONCAT(pa__get_usage__, PA_MODULE_NAME)(void);
+const char* _MACRO_CONCAT(pa__get_version__, PA_MODULE_NAME)(void);
+const char* _MACRO_CONCAT(pa__get_deprecated__, PA_MODULE_NAME)(void);
+bool _MACRO_CONCAT(pa__load_once__, PA_MODULE_NAME)(void);
+
+#else
+
 #define pa__init _MACRO_CONCAT(PA_MODULE_NAME, _LTX_pa__init)
 #define pa__done _MACRO_CONCAT(PA_MODULE_NAME, _LTX_pa__done)
 #define pa__get_author _MACRO_CONCAT(PA_MODULE_NAME, _LTX_pa__get_author)
@@ -124,6 +165,7 @@ const char* pa__get_usage(void);
 const char* pa__get_version(void);
 const char* pa__get_deprecated(void);
 bool pa__load_once(void);
+#endif /* __PA_STATIC_MODULE  */
 #endif /* PA_MODULE_NAME */
 
 #endif
